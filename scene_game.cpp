//******************************************************************************
//
//
//      scene_game
//
//
//******************************************************************************

//----< インクルード >-----------------------------------------------------------
#include "all.h"

//------< 定数 >----------------------------------------------------------------


//------< 変数 >----------------------------------------------------------------
int game_state;
int game_timer;

Sprite* sprBack;

#if 17
//******************************************************************************
// TODO:17 音楽をセレクトできるようにする
//------------------------------------------------------------------------------
/*
課題）
    □ これまでインデックス1番の音楽について操作してきましたが、せっかく3曲読み込んで
      いるので、カーソルキーで選曲できるようにしましょう。

手順）
    1.  下記でint bgmNoを宣言する。

    2.  game_updateのgame_stateが1のところで初期値0を設定しておく。
*/
//******************************************************************************
#endif
//TODO_17
int bgmNo;

//--------------------------------------
//  初期設定
//--------------------------------------
void game_init()
{
    game_state = 0;
    game_timer = 0;
}

//--------------------------------------
//  終了処理
//--------------------------------------
void game_deinit()
{
    safe_delete(sprBack);
}

//--------------------------------------
//  更新処理
//--------------------------------------
void game_update()
{
    switch (game_state)
    {
    case 0:
        //////// 初期設定 ////////

        sprBack = sprite_load(L"./Data/Images/DJ-booth.jpg");

        game_state++;
        /*fallthrough*/

    case 1:
        //////// パラメータの設定 ////////

        GameLib::setBlendMode(Blender::BS_ALPHA);

        bgmNo = 0;

        game_state++;
        /*fallthrough*/

    case 2:
        //////// 通常時 ////////
        if (TRG(0) & PAD_SELECT)
        {
            nextScene = SCENE_TITLE;
            break;
        }

#if 5
//******************************************************************************
// TODO:05 キー入力で音楽を再生する
//------------------------------------------------------------------------------
/*
課題）
    □ キーボードの数字の'1'（テンキーではない）が押された瞬間に、1番の音楽ファイルを
      再生します。今回はループ設定で。

解説）
    1. キー入力について：
       今回使用するキーが多くなるので、コントローラー対応のやり方ではなくてWindowsの
       通常のキー入力を使用する事にしましょう。

       □ トリガー（押した瞬間を検知）の書き方
         if (GetAsyncKeyState('1') & 1) { 処理 }

       □ ステート（押されているかどうか）の書き方
         if (GetAsyncKeyState('1') < 0) { 処理 }

    2. 上記if文の中で1番の音楽を再生します。
*/
//******************************************************************************
#endif
        //TODO_05
        if (GetAsyncKeyState('1') & 1)
        {
            music::play(bgmNo, TRUE);           //music::play(bgmNo, TRUE);
        }

#if 6
//******************************************************************************
// TODO:06 キー入力で音楽を停止させる
//------------------------------------------------------------------------------
/*
課題）
    □ キーボードの数字の'2'（テンキーではない）が押された瞬間に、1番の音楽ファイルを
      停止させます。

解説）
    使用関数）
        music::stop

    引数）
        1（音楽のインデックス）
*/
//******************************************************************************
#endif
        //TODO_06
        if (GetAsyncKeyState('2') & 1)
        {
            music::stop(bgmNo);                 // music::stop(bgmNo);
        }

#if 7
//******************************************************************************
// TODO:07 キー入力で音楽を一時停止させる
//------------------------------------------------------------------------------
/*
課題）
    □ キーボードの数字の'3'（テンキーではない）が押された瞬間に、1番の音楽ファイルを
      一時停止させます。

解説）
    使用関数）
        music::pause

    引数）
        音楽のインデックス
*/
//******************************************************************************
#endif
        //TODO_07
        if (GetAsyncKeyState('3') & 1)
        {
            music::pause(bgmNo);                //music::pause(bgmNo);
        }

#if 8
//******************************************************************************
// TODO:08 音楽を一時停止から復帰させる
//------------------------------------------------------------------------------
/*
課題）
    □ キーボードの数字の'4'（テンキーではない）が押された瞬間に、1番の音楽ファイルを
      リジューム（一時停止から復帰）させます。

解説）
    使用関数）
        music::resume

    引数）
        音楽のインデックス
*/
//******************************************************************************
#endif
        //TODO_08
        if (GetAsyncKeyState('4') & 1)
        {
            music::resume(bgmNo);               //music::resume(bgmNo);
        }

#if 9
//******************************************************************************
// TODO:09 音楽をフェードアウトさせる
//------------------------------------------------------------------------------
/*
課題）
    □ キーボードの数字の'5'（テンキーではない）が押された瞬間に、1番の音楽ファイルを
      フェードアウトさせ、3秒後に音楽を止めます。（線形補間）

      ※次の手順10をやるまでフェードアウトしません！

手順）
    使用関数）
        music::fade

    引数）
        音楽のインデックス
        ボリューム変更までの時間（単位：秒）
        ボリューム変更後の音量（省略可、デフォルトは0.0f）
*/
//******************************************************************************
#endif
        //TODO_09
        if (GetAsyncKeyState('5') & 1)
        {
            music::fade(bgmNo, 3);              //music::fade(bgmNo, 3);
        }

#if 11
//******************************************************************************
// TODO:11 音楽をフェードインさせる
//------------------------------------------------------------------------------
/*
課題）
    □ キーボードの数字の'6'（テンキーではない）が押された瞬間に、1番の音楽ファイルを
        フェードインさせ、4秒後にボリュームを0.5fにします。

手順）
    数字の6が押された瞬間であれば
        1番の音楽が使用可能で、かつ1番の音楽が停止中であれば
            1番の音楽を再生させる
            1番の音楽のボリュームを0.0fに設定する
        フェード関数で、1番の音楽を4秒後に0.5fのボリュームにする

解説）
    TODO_09でフェードアウトしましたが、music::fade関数の第3引数にボリュームを設定
    すると、指定の時間後にそのボリュームにする事ができます。（線形補間）
    ただし、音楽が停止した状態では、音楽を再生させる必要がありますし、その際に
    ボリュームを0.0fにしておく必要がでてきます。

    □ 音楽が使用可能かどうか
        使用関数）
            music::isInUse
        引数）
            音楽のインデックス
        戻り値）
            真       使用可能
            偽       使用不可能

    □ 音楽が停止中かどうか
        使用関数）
            music::getState
        引数）
            音楽のインデックス
        戻り値）
            DirectX::SoundState::STOPPED    音楽が停止している
            DirectX::SoundState::PLAYING    音楽が再生中である
            DirectX::SoundState::PAUSED     音楽が一時停止している

        ※この関数を呼ぶ前に必ずmusic::inUse関数で、音楽が使用可能かどうか調べる必要が
                　あります。使用不可の場合にこの関数を使うとフリーズする可能性があります。

    □ 音楽のボリュームを設定する
        使用関数）
            music::setVolume
        引数）
            音楽のインデックス
            ボリューム
*/
//******************************************************************************
#endif
        //TODO_11
        if (GetAsyncKeyState('6') & 1)
        {
            if (music::isInUse(bgmNo) && music::getState(bgmNo) == DirectX::SoundState::STOPPED)        // if (music::isInUse(bgmNo) && music::getState(bgmNo) == DirectX::SoundState::STOPPED)
            {
                music::play(bgmNo);                                                             //music::play(bgmNo);
                music::setVolume(bgmNo, 0);                                                     //music::setVolume(bgmNo, 0);
            }
            music::fade(bgmNo, 4, 0.5f);                                                        //music::fade(bgmNo, 4, 0.5f);
        }

#if 12
//******************************************************************************
// TODO:12 音楽のピッチを下げる
//------------------------------------------------------------------------------
/*
課題）
    □ キーボードの数字の'7'（テンキーではない）が押されている間じゅう、1番の音楽の
      ピッチを下げ続けましょう。変化量には-0.01fを入れておきます。

      ※今回は押した瞬間ではありません！

解説）
    使用関数）
        music::adjustPitch

    引数）
        音楽のインデックス
        変化量（ピッチが取り得る範囲は-1.0f〜1.0fです。）
*/
//******************************************************************************
#endif
        //TODO_12
        if (GetAsyncKeyState('7') < 0)
        {
            music::adjustPitch(bgmNo, -0.01f);          // music::adjustPitch(bgmNo, -0.01f);
        }

#if 13
//******************************************************************************
// TODO:13 音楽のピッチを上げる
//------------------------------------------------------------------------------
/*
課題）
    □ キーボードの数字の'8'（テンキーではない）が押されている間じゅう、1番の音楽の
      ピッチを上げ続けましょう。

手順）
    上記TODO_13と同じです。今回は、ピッチを上げるので、変化量は0.01fとなります。
*/
//******************************************************************************
#endif
        //TODO_13
        if (GetAsyncKeyState('8') < 0)
        {
            music::adjustPitch(bgmNo, 0.01f);       //music::adjustPitch(bgmNo, 0.01f);
        }

#if 14
//******************************************************************************
// TODO:14 音楽のパンを下げる
//------------------------------------------------------------------------------
/*
課題）
    □ キーボードの数字の'9'（テンキーではない）が押されている間じゅう、1番の音楽の
      パンを下げ続けましょう。（音源が左に動きます。確かめるにはヘッドフォン推奨。）
      変化量には-0.01fを入れておきます。

解説）
    使用関数）
        music::adjustPan

    引数）
        音楽のインデックス
        変化量（パンが取り得る範囲は-1.0f〜1.0fです。）
*/
//******************************************************************************
#endif
        //TODO_14
        if (GetAsyncKeyState('9') < 0)
        {
            music::adjustPan(bgmNo, -0.01f);            //music::adjustPan(bgmNo, -0.01f);
        }

#if 15
//******************************************************************************
// TODO:15 音楽のパンを上げる
//------------------------------------------------------------------------------
/*
課題）
    □ キーボードの数字の'0'（テンキーではない）が押されている間じゅう、1番の音楽の
      パンを上げ続けましょう。（音源が右に動いていく）

手順）
    上記TODO_14と同じです。今回は、パンを上げるので、変化量は0.01fとなります。
*/
//******************************************************************************
#endif
        //TODO_15
        if (GetAsyncKeyState('0') < 0)
        {
            music::adjustPan(bgmNo, 0.01f);     // music::adjustPan(bgmNo, 0.01f);
        }



#if 16
//******************************************************************************
// TODO:16 操作方法などを表示させる
//------------------------------------------------------------------------------
/*
課題）
    □ 操作方法などを表示させます。下記をアンコメントするだけで、できます。

解説）
    現在のピッチの値と、現在のパンの値を表示させる際に、それぞれの値を取得できる関数を
    呼んでいる事に注意して下さい。
*/
//******************************************************************************
#endif
        debug::setString("");
        debug::setString("[MUSIC]");
        debug::setString("");
        debug::setString("BGM < %d >", bgmNo);
        debug::setString("volume:%f", music::getVolume(bgmNo));
        debug::setString("pitch :%f", music::getPitch(bgmNo));
        debug::setString("pan   :%f", music::getPan(bgmNo));
        debug::setString("");
        debug::setString("1   Play");
        debug::setString("2   Stop");
        debug::setString("3   Pause");
        debug::setString("4   Resume");
        debug::setString("5   FadeOut");
        debug::setString("6   FadeIn");
        debug::setString("7   Pitch -");
        debug::setString("8   Pitch +");
        debug::setString("9   Pan   -");
        debug::setString("0   Pan   +");

#if 18
//******************************************************************************
// TODO:18 カーソルキー左右で選曲する
//------------------------------------------------------------------------------
/*
課題）
    □ 下記を実装しましょう。

      カーソルキーの←が押された瞬間に、bgmNoを1減らす。  ←はVK_LEFT
      カーソルキーの→が押された瞬間に、bgmNoを1増やす。  →はVK_RIGHT

      ※bgmNoが取り得る値
        最小値：0
        最大値：GameLib::MUSIC_FILE_MAX - 1

*/
//******************************************************************************
#endif
        //TODO_18
        if (GetAsyncKeyState(VK_LEFT) & 1)
        {
            --bgmNo;
            if (bgmNo < 0) bgmNo = 0;
        }
        if (GetAsyncKeyState(VK_RIGHT) & 1)
        {
            ++bgmNo;
            if (bgmNo > GameLib::MUSIC_FILE_MAX - 27)
                bgmNo = GameLib::MUSIC_FILE_MAX - 27;
        }

#if 19
//******************************************************************************
// TODO:19 bgmNoの値に応じて操作をする
//------------------------------------------------------------------------------
/*
課題）
    □ これまで1番の音楽に対して行ってきた事を、全てbgmNo番に書き換えましょう。
      注意深く、もれなく書き換えて下さい。

      ※TODO_05以降、操作方法も忘れずに！

      → 選曲ができるようになります。
*/
//******************************************************************************
#endif

#if 20
//******************************************************************************
// TODO:20 全曲同時にpause、resume
//------------------------------------------------------------------------------
/*
課題）
    □ TODO_19で複数の音楽を同時に鳴らすことができるようになっています。全ての音楽を
      一時停止、再開する機能を試しておきましょう。引数なしでmusic::pause関数と
      music::resume関数を使うとできます。ついでに、引数なしのmusic::stop関数で
      全ての音楽を停止させる事ができます。

    □ 下記（操作方法）をアンコメントしましょう。

    □ 下記を実装しましょう。

      'P'が押された瞬間に、全ての曲をポーズ
      'R'が押された瞬間に、全ての曲を再開
      'S'が押された瞬間に、全ての曲を停止
*/
//******************************************************************************
#endif
        debug::setString("");
        debug::setString("P   Pause All");
        debug::setString("R   Resume All");
        debug::setString("S   Stop All");

        //TODO_20
        if (GetAsyncKeyState('P') & 1) music::pause();
        if (GetAsyncKeyState('R') & 1) music::resume();
        if (GetAsyncKeyState('S') & 1) music::stop();


#if 22
//******************************************************************************
// TODO:22 効果音を再生する
//------------------------------------------------------------------------------
/*
課題）
    □ キーボードのキーを押した瞬間に、各効果音を鳴らしてみましょう。

使用関数）
    sound::play

引数）
    xwbのインデックス
    効果音のインデックス

手順）
    1. 操作方法をアンコメントする
    2. 'Z'が押された瞬間に、xwb0番の効果音0番を鳴らす。
    3. 'X'が押された瞬間に、xwb0番の効果音1番を鳴らす。
    4. 'C'が押された瞬間に、xwb1番の効果音0番を鳴らす。
    5. 'V'が押された瞬間に、xwb1番の効果音1番を鳴らす。
    6. 'B'が押された瞬間に、xwb1番の効果音2番を鳴らす。
    7. 'N'が押された瞬間に、xwb1番の効果音3番を鳴らす。
    8. 'M'が押された瞬間に、xwb1番の効果音4番を鳴らす。
*/
//******************************************************************************
#endif
        debug::setString("");
        debug::setString("");
        debug::setString("[SOUND]");
        debug::setString("");
        debug::setString("Z   xwb0 sound0");
        debug::setString("X   xwb0 sound1");
        //debug::setString("");
        debug::setString("C   xwb1 sound0");
        debug::setString("V   xwb1 sound1");
        debug::setString("B   xwb1 sound2");
        debug::setString("N   xwb1 sound3");
        debug::setString("M   xwb1 sound4");
        debug::setString("A   pokemon?");
        debug::setString("F   hit");
        debug::setString("D   reser");

        //TODO_22
        if (GetAsyncKeyState('Z') & 1)  sound::play(XWB_SYSTEM, XWB_SYSTEM_KATI);
        if (GetAsyncKeyState('X') & 1)  sound::play(XWB_SYSTEM, XWB_SYSTEM_START);

        if (GetAsyncKeyState('C') & 1)  sound::play(XWB_STAGE1, XWB_STAGE1_COIN);
        if (GetAsyncKeyState('V') & 1)  sound::play(XWB_STAGE1, XWB_STAGE1_JUMP);
        if (GetAsyncKeyState('B') & 1)  sound::play(XWB_STAGE1, XWB_STAGE1_SHOT);
        if (GetAsyncKeyState('N') & 1)  sound::play(XWB_STAGE1, XWB_STAGE1_MISSILE);
        if (GetAsyncKeyState('M') & 1)  sound::play(XWB_STAGE1, XWB_STAGE1_LASER);

        if (GetAsyncKeyState('A') & 1)  sound::play(2, 0);
        if (GetAsyncKeyState('F') & 1)  sound::play(2, 1);
        if (GetAsyncKeyState('D') & 1)  sound::play(2, 2);
#if 24
//******************************************************************************
// TODO:24 ラベルを活用する
//------------------------------------------------------------------------------
/*
課題）
    sound::play(1, 3)とか書かれていても、何の音が鳴るかは鳴らしてみないとわかりません。
    そこで、定数を使ってラベルを活用してみましょう。

    □ 効果音のラベルを活用する
        audio.hでXWB_SYSTEMとXWB_STAGE1という2つの定数を定義していますので、効果音関連で
        今までに打ち込んだxwbのインデックスの0と1を、全てこれらの定数に書き換えましょう。
        （TODO_21 ~ TODO_23）

        また、それぞれの効果音ごとにラベルをつくってあります。全てこれらの定数に書き換え
        ましょう。（TODO_22とTODO_23）

    □ 音楽のラベルも作成しておきましょう。（自分でつくりましょう）
*/
//******************************************************************************
#endif

        break;
    }

    game_timer++;
}

//--------------------------------------
//  描画処理
//--------------------------------------
void game_render()
{
    GameLib::clear(0.2f, 0.2f, 0.4f);

    sprite_render(sprBack, 0, 0);

    primitive::rect(
        0, 32, 320, 650, 
        0, 0, ToRadian(0), 
        0, 0, 0, 0.7f
    );
}
